import socket
import requests
from urllib.parse import urlparse

def scan_ports(ip, ports=[80, 443, 22, 21, 3306]):
    print(f"Scanning ports on {ip}...")
    open_ports = []
    for port in ports:
        sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
        sock.settimeout(1)
        result = sock.connect_ex((ip, port))
        if result == 0:
            open_ports.append(port)
        sock.close()
    return open_ports

def check_headers(url):
    print(f"Checking HTTP headers for {url}...")
    try:
        response = requests.get(url)
        headers = response.headers
        issues = []
        if "X-Content-Type-Options" not in headers:
            issues.append("Missing X-Content-Type-Options")
        if "X-Frame-Options" not in headers:
            issues.append("Missing X-Frame-Options")
        if "Content-Security-Policy" not in headers:
            issues.append("Missing Content-Security-Policy")
        return issues
    except Exception as e:
        return [f"Error checking headers: {e}"]

def vulnerability_scanner(target):
    parsed_url = urlparse(target)
    ip = parsed_url.hostname or target
    ports = scan_ports(ip)
    print(f"Open ports on {ip}: {ports}")
    
    if parsed_url.scheme in ["http", "https"]:
        header_issues = check_headers(target)
        print("HTTP Header Issues:")
        for issue in header_issues:
            print(f" - {issue}")
    else:
        print("Skipping HTTP header check for non-HTTP/HTTPS targets.")

if __name__ == "__main__":
    target = input("Enter the target URL or IP address: ")
    vulnerability_scanner(target)